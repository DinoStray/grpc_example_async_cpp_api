// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greeting.proto

#include "greeting.pb.h"
#include "greeting.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc {
namespace example {

static const char* GreetingService_method_names[] = {
  "/grpc.example.GreetingService/SubscribeGreetingBySecond",
};

std::unique_ptr< GreetingService::Stub> GreetingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GreetingService::Stub> stub(new GreetingService::Stub(channel));
  return stub;
}

GreetingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubscribeGreetingBySecond_(GreetingService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>* GreetingService::Stub::SubscribeGreetingBySecondRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>::Create(channel_.get(), rpcmethod_SubscribeGreetingBySecond_, context);
}

void GreetingService::Stub::experimental_async::SubscribeGreetingBySecond(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::grpc::example::RequestSubscribe,::grpc::example::ReplyGreeting>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::grpc::example::RequestSubscribe,::grpc::example::ReplyGreeting>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeGreetingBySecond_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>* GreetingService::Stub::AsyncSubscribeGreetingBySecondRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>::Create(channel_.get(), cq, rpcmethod_SubscribeGreetingBySecond_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>* GreetingService::Stub::PrepareAsyncSubscribeGreetingBySecondRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>::Create(channel_.get(), cq, rpcmethod_SubscribeGreetingBySecond_, context, false, nullptr);
}

GreetingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreetingService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GreetingService::Service, ::grpc::example::RequestSubscribe, ::grpc::example::ReplyGreeting>(
          std::mem_fn(&GreetingService::Service::SubscribeGreetingBySecond), this)));
}

GreetingService::Service::~Service() {
}

::grpc::Status GreetingService::Service::SubscribeGreetingBySecond(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::example::ReplyGreeting, ::grpc::example::RequestSubscribe>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc
}  // namespace example

